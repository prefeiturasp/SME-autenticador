(function ($) {
$.fn.fixer = function (options) {
var opts = $.extend({}, $.fn.fixer.defaults, options); return $(this).each(function () {
if ($(this).get(0).tagName != "TABLE") return; var fixedrows = Math.round(opts.fixedrows); var fixedcols = Math.round(opts.fixedcols); var height, width; var widthInicial = 150; var parent = $(opts.parent); if (parent.length) { widthInicial = 0; height = Math.round(parent.height()); width = Math.round(parent.width()); } else { height = Math.round(opts.height); if ($(window).height() < 700) { widthInicial = 0; height = 300; } opts.width = $(window).width() - 50; width = Math.round(opts.width); } var sbwidth = $.getScrollbarWidth(); var fixertable = $(this); fixertable.removeClass('clearfix'); fixertable.css('margin', '0').css('padding', '0'); fixershell = $(this.cloneNode(false)); var tableheight = fixertable.outerHeight(); var tablewidth = fixertable.outerWidth(); var parentwidth = fixertable.parent().width(); if (fixertable.is(":hidden")) { fixertable.evenIfHidden(function (element) { tableheight = element.outerHeight(); tablewidth = element.outerWidth(); }); fixertable.parent().evenIfHidden(function (element) { parentwidth = element.width(); }); } var setwidth = false; if (width > 0) setwidth = true; else { width = parentwidth; if ($.browser.msie) setwidth = true; } var rows = $('tr', fixertable); var cols = $('th,td', rows[0]); var rowcount = rows.length; var colcount = cols.length; if (rowcount == 0 || colcount == 0) return; var fixrows = false; var fixcols = false; if (fixedrows > 0 && fixedrows < rowcount) fixrows = true; else
fixedrows = 0; if (fixedcols > 0 && fixedcols < colcount) fixcols = true; else
fixedcols = 0; var heights = new Array(); var outerheights = new Array(); var widths = new Array(); rows.each(function () { if ($(this).is(":hidden")) $(this).evenIfHidden(function (element) { heights.push(element.height()); outerheights.push(element.outerHeight()); }); else { outerheights.push($(this).outerHeight()); heights.push($(this).height()); } }); cols.each(function () {
if ($(this).is(":hidden")) $(this).evenIfHidden(function (element) { widths.push(element.outerWidth()); }); else
widths.push($(this).outerWidth());
}); var fixedheight = 0; var fixedwidth = widthInicial; for (var i = 0; i < fixedrows; i++) fixedheight = fixedheight + outerheights[i]; for (var i = 0; i < fixedcols; i++) fixedwidth = fixedwidth + widths[i]; if (fixedheight > height || tableheight <= height) { fixrows = false; fixedrows = 0; fixedheight = 0; } if (fixedwidth > width || tablewidth <= width) { fixcols = false; fixedcols = 0; fixedwidth = 0; } if (tableheight < height && tablewidth < width) return; var placeholder = $('<table></table>'); fixertable.replaceWith(placeholder); if (fixcols) rows.each(function (i, e) { $(this).height(heights[i]); }); var toplefttable; var toprighttable; var bottomlefttable; var bottomrighttable = fixertable; if (fixrows) { toprighttable = fixershell.clone(); toprighttable.append(rows.slice(0, fixedrows)); } if (fixcols) { if (fixrows) { toplefttable = fixershell.clone(); for (i = 0; i < fixedrows; i++) { row = $(rows[i].cloneNode(false)); row.append($('td,th', rows[i]).slice(0, fixedcols)); toplefttable.append(row); } } bottomlefttable = fixershell.clone(); for (i = fixedrows; i < rowcount; i++) { row = $(rows[i].cloneNode(false)); row.append($('td,th', rows[i]).slice(0, fixedcols)); bottomlefttable.append(row); } } if (fixrows) { toprighttable.css('box-sizing', 'border-box').css("table-layout", "fixed"); bottomrighttable.css('box-sizing', 'border-box').css("table-layout", "fixed"); var colgroup = $("<colgroup></colgroup>"); for (i = fixedcols; i < colcount; i++) colgroup.append($("<col></col>").css("width", widths[i])); toprighttable.prepend(colgroup); bottomrighttable.prepend(colgroup.clone()); if (fixcols) { var colgroup = $("<colgroup></colgroup>"); toplefttable.css('box-sizing', 'border-box').css("table-layout", "fixed"); bottomlefttable.css('box-sizing', 'border-box').css("table-layout", "fixed"); for (i = 0; i < fixedcols; i++) colgroup.append($("<col></col>").css("width", widths[i])); toplefttable.prepend(colgroup); bottomlefttable.prepend(colgroup.clone()); toplefttable.css("width", fixedwidth + 1); bottomlefttable.css("width", fixedwidth + 1); toprighttable.css("width", tablewidth - fixedwidth + 1); bottomrighttable.css("width", tablewidth - fixedwidth + 1); } else { toprighttable.css("width", tablewidth); bottomrighttable.css("width", tablewidth); } } var wrapper = $("<div></div>"); if (fixrows && fixcols) { var topleft = $("<div></div>"); topleft.css("float", "left").css("overflow", "hidden").css('margin', '0').css('padding', '0'); topleft.append(toplefttable); wrapper.append(topleft); } if (fixrows) { var topright = $("<div></div>"); topright.css("overflow", "hidden").css('margin', '0').css('padding', '0'); if ($.browser.msie) topright.css("float", "left"); topright.append(toprighttable); wrapper.append(topright); wrapper.append($("<div></div>").css("clear", "both").css('margin', '0').css('padding', '0')); } if (fixcols) { var bottomleft = $("<div></div>"); bottomleft.css("float", "left").css("overflow", "hidden").css('margin', '0').css('padding', '0'); bottomleft.append(bottomlefttable); wrapper.append(bottomleft); } var bottomright = $("<div></div>"); bottomright.css("overflow", "hidden").css('margin', '0').css('padding', '0'); if (!setwidth || tablewidth > width) bottomright.css("overflow-x", "scroll"); if (tableheight > height) { bottomright.css("overflow-y", "scroll"); if (!setwidth && fixrows) { topright.css("overflow-y", "scroll"); if (fixedheight < (2 * sbwidth)) { topright.prepend($("<div></div>").css("height", 2 * sbwidth - fixedheight)); if (fixcols) topleft.prepend($("<div></div>").css("height", 2 * sbwidth - fixedheight)); } } } if ($.browser.msie) bottomright.css("float", "left"); bottomright.append(bottomrighttable); wrapper.append(bottomright); wrapper.append($("<div></div>").css("clear", "both")); if ($.browser.msie) bottomright.css("height", height - (fixedheight - 20)); else
bottomright.css("height", height - fixedheight); if (fixcols) bottomleft.css("height", height - fixedheight - sbwidth); if (setwidth) { bottomright.css("width", width - fixedwidth); if (fixrows) topright.css("width", width - fixedwidth); } if (fixrows && fixcols) bottomright.scroll(function () { topright.scrollLeft(bottomright.scrollLeft()); bottomleft.scrollTop(bottomright.scrollTop()); }); else if (fixcols) bottomright.scroll(function () { bottomleft.scrollTop(bottomright.scrollTop()); }); else if (fixrows) bottomright.scroll(function () { topright.scrollLeft(bottomright.scrollLeft()); }); placeholder.replaceWith(wrapper); if (fixcols && setwidth) if (wrapper.is(":hidden")) { var bottomleftouterwidth; var bottomrightouterwidth; bottomlefttable.evenIfHidden(function (element) { bottomleftouterwidth = bottomleft.outerWidth(); }); bottomrighttable.evenIfHidden(function (element) { bottomrightouterwidth = bottomright.outerWidth(); }); wrapper.css('width', bottomleftouterwidth + bottomrightouterwidth); } else
wrapper.css('width', bottomleft.outerWidth() + bottomright.outerWidth());
});
}; $.fn.fixer.defaults = { width: 0, height: 500, fixedrows: 1, fixedcols: 1 };
})(jQuery); jQuery.fn.evenIfHidden = function (callback) { return this.each(function () { var self = $(this); var styleBackups = []; var hiddenElements = self.parents().andSelf().filter(':hidden'); if (!hiddenElements.length) { callback(self); return true; } hiddenElements.each(function () { var style = $(this).attr('style'); style = typeof style == 'undefined' ? '' : style; styleBackups.push(style); var display = 'block'; var tag = $(this)[0].tagName; if (tag == 'TABLE' || tag == 'TBODY') display = 'table'; else if (tag == 'TR') display = 'table-row'; else if (tag == 'TH' || tag == 'TD') display = 'table-cell'; $(this).attr('style', style + ' display: ' + display + ' !important;'); }); hiddenElements.eq(0).css('left', -10000); callback(self); hiddenElements.each(function () { $(this).attr('style', styleBackups.shift()); }); }); }; /*! Copyright (c) 2008 Brandon Aaron (brandon.aaron@gmail.com || http://brandonaaron.net)
Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) 
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
*/
(function ($) { var scrollbarWidth = 0; $.getScrollbarWidth = function () { if (!scrollbarWidth) { if ($.browser.msie) { var $textarea1 = $('<textarea cols="10" rows="2"></textarea>').css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body'), $textarea2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body'); scrollbarWidth = $textarea1.width() - $textarea2.width(); $textarea1.add($textarea2).remove(); } else { var $div = $('<div />').css({ width: 100, height: 100, overflow: 'auto', position: 'absolute', top: -1000, left: -1000 }).prependTo('body').append('<div />').find('div').css({ width: '100%', height: 200 }); scrollbarWidth = 100 - $div.width(); $div.parent().remove(); } } return scrollbarWidth; }; })(jQuery);